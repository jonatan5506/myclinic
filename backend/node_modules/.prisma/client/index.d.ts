
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Usuario_Tipo
 * 
 */
export type Usuario_Tipo = $Result.DefaultSelection<Prisma.$Usuario_TipoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.usuario_Tipo`: Exposes CRUD operations for the **Usuario_Tipo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuario_Tipos
    * const usuario_Tipos = await prisma.usuario_Tipo.findMany()
    * ```
    */
  get usuario_Tipo(): Prisma.Usuario_TipoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Usuario_Tipo: 'Usuario_Tipo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "usuario_Tipo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Usuario_Tipo: {
        payload: Prisma.$Usuario_TipoPayload<ExtArgs>
        fields: Prisma.Usuario_TipoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Usuario_TipoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Usuario_TipoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload>
          }
          findFirst: {
            args: Prisma.Usuario_TipoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Usuario_TipoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload>
          }
          findMany: {
            args: Prisma.Usuario_TipoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload>[]
          }
          create: {
            args: Prisma.Usuario_TipoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload>
          }
          createMany: {
            args: Prisma.Usuario_TipoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Usuario_TipoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload>
          }
          update: {
            args: Prisma.Usuario_TipoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload>
          }
          deleteMany: {
            args: Prisma.Usuario_TipoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Usuario_TipoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Usuario_TipoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Usuario_TipoPayload>
          }
          aggregate: {
            args: Prisma.Usuario_TipoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario_Tipo>
          }
          groupBy: {
            args: Prisma.Usuario_TipoGroupByArgs<ExtArgs>
            result: $Utils.Optional<Usuario_TipoGroupByOutputType>[]
          }
          count: {
            args: Prisma.Usuario_TipoCountArgs<ExtArgs>
            result: $Utils.Optional<Usuario_TipoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Usuario_TipoCountOutputType
   */

  export type Usuario_TipoCountOutputType = {
    usuario: number
  }

  export type Usuario_TipoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Usuario_TipoCountOutputTypeCountUsuarioArgs
  }

  // Custom InputTypes
  /**
   * Usuario_TipoCountOutputType without action
   */
  export type Usuario_TipoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_TipoCountOutputType
     */
    select?: Usuario_TipoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Usuario_TipoCountOutputType without action
   */
  export type Usuario_TipoCountOutputTypeCountUsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    usuario_id: number | null
    usuario_tipo_id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    usuario_id: number | null
    usuario_tipo_id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    usuario_id: number | null
    usuario_nome: string | null
    usuario_login: string | null
    usuario_cpf: string | null
    usuario_senha: string | null
    usuario_tipo_id: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    usuario_id: number | null
    usuario_nome: string | null
    usuario_login: string | null
    usuario_cpf: string | null
    usuario_senha: string | null
    usuario_tipo_id: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    usuario_id: number
    usuario_nome: number
    usuario_login: number
    usuario_cpf: number
    usuario_senha: number
    usuario_tipo_id: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    usuario_id?: true
    usuario_tipo_id?: true
  }

  export type UsuarioSumAggregateInputType = {
    usuario_id?: true
    usuario_tipo_id?: true
  }

  export type UsuarioMinAggregateInputType = {
    usuario_id?: true
    usuario_nome?: true
    usuario_login?: true
    usuario_cpf?: true
    usuario_senha?: true
    usuario_tipo_id?: true
  }

  export type UsuarioMaxAggregateInputType = {
    usuario_id?: true
    usuario_nome?: true
    usuario_login?: true
    usuario_cpf?: true
    usuario_senha?: true
    usuario_tipo_id?: true
  }

  export type UsuarioCountAggregateInputType = {
    usuario_id?: true
    usuario_nome?: true
    usuario_login?: true
    usuario_cpf?: true
    usuario_senha?: true
    usuario_tipo_id?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    usuario_id: number
    usuario_nome: string
    usuario_login: string
    usuario_cpf: string
    usuario_senha: string
    usuario_tipo_id: number
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    usuario_id?: boolean
    usuario_nome?: boolean
    usuario_login?: boolean
    usuario_cpf?: boolean
    usuario_senha?: boolean
    usuario_tipo_id?: boolean
    tipo_usuario?: boolean | Usuario$tipo_usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>


  export type UsuarioSelectScalar = {
    usuario_id?: boolean
    usuario_nome?: boolean
    usuario_login?: boolean
    usuario_cpf?: boolean
    usuario_senha?: boolean
    usuario_tipo_id?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipo_usuario?: boolean | Usuario$tipo_usuarioArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      tipo_usuario: Prisma.$Usuario_TipoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      usuario_id: number
      usuario_nome: string
      usuario_login: string
      usuario_cpf: string
      usuario_senha: string
      usuario_tipo_id: number
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `usuario_id`
     * const usuarioWithUsuario_idOnly = await prisma.usuario.findMany({ select: { usuario_id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tipo_usuario<T extends Usuario$tipo_usuarioArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$tipo_usuarioArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly usuario_id: FieldRef<"Usuario", 'Int'>
    readonly usuario_nome: FieldRef<"Usuario", 'String'>
    readonly usuario_login: FieldRef<"Usuario", 'String'>
    readonly usuario_cpf: FieldRef<"Usuario", 'String'>
    readonly usuario_senha: FieldRef<"Usuario", 'String'>
    readonly usuario_tipo_id: FieldRef<"Usuario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.tipo_usuario
   */
  export type Usuario$tipo_usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    where?: Usuario_TipoWhereInput
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Usuario_Tipo
   */

  export type AggregateUsuario_Tipo = {
    _count: Usuario_TipoCountAggregateOutputType | null
    _avg: Usuario_TipoAvgAggregateOutputType | null
    _sum: Usuario_TipoSumAggregateOutputType | null
    _min: Usuario_TipoMinAggregateOutputType | null
    _max: Usuario_TipoMaxAggregateOutputType | null
  }

  export type Usuario_TipoAvgAggregateOutputType = {
    usuario_tipo_id: number | null
  }

  export type Usuario_TipoSumAggregateOutputType = {
    usuario_tipo_id: number | null
  }

  export type Usuario_TipoMinAggregateOutputType = {
    usuario_tipo_id: number | null
    usuario_tipo: string | null
    parametro_edit_config: boolean | null
  }

  export type Usuario_TipoMaxAggregateOutputType = {
    usuario_tipo_id: number | null
    usuario_tipo: string | null
    parametro_edit_config: boolean | null
  }

  export type Usuario_TipoCountAggregateOutputType = {
    usuario_tipo_id: number
    usuario_tipo: number
    parametro_edit_config: number
    _all: number
  }


  export type Usuario_TipoAvgAggregateInputType = {
    usuario_tipo_id?: true
  }

  export type Usuario_TipoSumAggregateInputType = {
    usuario_tipo_id?: true
  }

  export type Usuario_TipoMinAggregateInputType = {
    usuario_tipo_id?: true
    usuario_tipo?: true
    parametro_edit_config?: true
  }

  export type Usuario_TipoMaxAggregateInputType = {
    usuario_tipo_id?: true
    usuario_tipo?: true
    parametro_edit_config?: true
  }

  export type Usuario_TipoCountAggregateInputType = {
    usuario_tipo_id?: true
    usuario_tipo?: true
    parametro_edit_config?: true
    _all?: true
  }

  export type Usuario_TipoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario_Tipo to aggregate.
     */
    where?: Usuario_TipoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuario_Tipos to fetch.
     */
    orderBy?: Usuario_TipoOrderByWithRelationInput | Usuario_TipoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Usuario_TipoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuario_Tipos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuario_Tipos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuario_Tipos
    **/
    _count?: true | Usuario_TipoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Usuario_TipoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Usuario_TipoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Usuario_TipoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Usuario_TipoMaxAggregateInputType
  }

  export type GetUsuario_TipoAggregateType<T extends Usuario_TipoAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario_Tipo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario_Tipo[P]>
      : GetScalarType<T[P], AggregateUsuario_Tipo[P]>
  }




  export type Usuario_TipoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Usuario_TipoWhereInput
    orderBy?: Usuario_TipoOrderByWithAggregationInput | Usuario_TipoOrderByWithAggregationInput[]
    by: Usuario_TipoScalarFieldEnum[] | Usuario_TipoScalarFieldEnum
    having?: Usuario_TipoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Usuario_TipoCountAggregateInputType | true
    _avg?: Usuario_TipoAvgAggregateInputType
    _sum?: Usuario_TipoSumAggregateInputType
    _min?: Usuario_TipoMinAggregateInputType
    _max?: Usuario_TipoMaxAggregateInputType
  }

  export type Usuario_TipoGroupByOutputType = {
    usuario_tipo_id: number
    usuario_tipo: string
    parametro_edit_config: boolean
    _count: Usuario_TipoCountAggregateOutputType | null
    _avg: Usuario_TipoAvgAggregateOutputType | null
    _sum: Usuario_TipoSumAggregateOutputType | null
    _min: Usuario_TipoMinAggregateOutputType | null
    _max: Usuario_TipoMaxAggregateOutputType | null
  }

  type GetUsuario_TipoGroupByPayload<T extends Usuario_TipoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Usuario_TipoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Usuario_TipoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Usuario_TipoGroupByOutputType[P]>
            : GetScalarType<T[P], Usuario_TipoGroupByOutputType[P]>
        }
      >
    >


  export type Usuario_TipoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    usuario_tipo_id?: boolean
    usuario_tipo?: boolean
    parametro_edit_config?: boolean
    usuario?: boolean | Usuario_Tipo$usuarioArgs<ExtArgs>
    _count?: boolean | Usuario_TipoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario_Tipo"]>


  export type Usuario_TipoSelectScalar = {
    usuario_tipo_id?: boolean
    usuario_tipo?: boolean
    parametro_edit_config?: boolean
  }

  export type Usuario_TipoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Usuario_Tipo$usuarioArgs<ExtArgs>
    _count?: boolean | Usuario_TipoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $Usuario_TipoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario_Tipo"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      usuario_tipo_id: number
      usuario_tipo: string
      parametro_edit_config: boolean
    }, ExtArgs["result"]["usuario_Tipo"]>
    composites: {}
  }

  type Usuario_TipoGetPayload<S extends boolean | null | undefined | Usuario_TipoDefaultArgs> = $Result.GetResult<Prisma.$Usuario_TipoPayload, S>

  type Usuario_TipoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Usuario_TipoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Usuario_TipoCountAggregateInputType | true
    }

  export interface Usuario_TipoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario_Tipo'], meta: { name: 'Usuario_Tipo' } }
    /**
     * Find zero or one Usuario_Tipo that matches the filter.
     * @param {Usuario_TipoFindUniqueArgs} args - Arguments to find a Usuario_Tipo
     * @example
     * // Get one Usuario_Tipo
     * const usuario_Tipo = await prisma.usuario_Tipo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Usuario_TipoFindUniqueArgs>(args: SelectSubset<T, Usuario_TipoFindUniqueArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario_Tipo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Usuario_TipoFindUniqueOrThrowArgs} args - Arguments to find a Usuario_Tipo
     * @example
     * // Get one Usuario_Tipo
     * const usuario_Tipo = await prisma.usuario_Tipo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Usuario_TipoFindUniqueOrThrowArgs>(args: SelectSubset<T, Usuario_TipoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario_Tipo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Usuario_TipoFindFirstArgs} args - Arguments to find a Usuario_Tipo
     * @example
     * // Get one Usuario_Tipo
     * const usuario_Tipo = await prisma.usuario_Tipo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Usuario_TipoFindFirstArgs>(args?: SelectSubset<T, Usuario_TipoFindFirstArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario_Tipo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Usuario_TipoFindFirstOrThrowArgs} args - Arguments to find a Usuario_Tipo
     * @example
     * // Get one Usuario_Tipo
     * const usuario_Tipo = await prisma.usuario_Tipo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Usuario_TipoFindFirstOrThrowArgs>(args?: SelectSubset<T, Usuario_TipoFindFirstOrThrowArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuario_Tipos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Usuario_TipoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuario_Tipos
     * const usuario_Tipos = await prisma.usuario_Tipo.findMany()
     * 
     * // Get first 10 Usuario_Tipos
     * const usuario_Tipos = await prisma.usuario_Tipo.findMany({ take: 10 })
     * 
     * // Only select the `usuario_tipo_id`
     * const usuario_TipoWithUsuario_tipo_idOnly = await prisma.usuario_Tipo.findMany({ select: { usuario_tipo_id: true } })
     * 
     */
    findMany<T extends Usuario_TipoFindManyArgs>(args?: SelectSubset<T, Usuario_TipoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario_Tipo.
     * @param {Usuario_TipoCreateArgs} args - Arguments to create a Usuario_Tipo.
     * @example
     * // Create one Usuario_Tipo
     * const Usuario_Tipo = await prisma.usuario_Tipo.create({
     *   data: {
     *     // ... data to create a Usuario_Tipo
     *   }
     * })
     * 
     */
    create<T extends Usuario_TipoCreateArgs>(args: SelectSubset<T, Usuario_TipoCreateArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuario_Tipos.
     * @param {Usuario_TipoCreateManyArgs} args - Arguments to create many Usuario_Tipos.
     * @example
     * // Create many Usuario_Tipos
     * const usuario_Tipo = await prisma.usuario_Tipo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Usuario_TipoCreateManyArgs>(args?: SelectSubset<T, Usuario_TipoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario_Tipo.
     * @param {Usuario_TipoDeleteArgs} args - Arguments to delete one Usuario_Tipo.
     * @example
     * // Delete one Usuario_Tipo
     * const Usuario_Tipo = await prisma.usuario_Tipo.delete({
     *   where: {
     *     // ... filter to delete one Usuario_Tipo
     *   }
     * })
     * 
     */
    delete<T extends Usuario_TipoDeleteArgs>(args: SelectSubset<T, Usuario_TipoDeleteArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario_Tipo.
     * @param {Usuario_TipoUpdateArgs} args - Arguments to update one Usuario_Tipo.
     * @example
     * // Update one Usuario_Tipo
     * const usuario_Tipo = await prisma.usuario_Tipo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Usuario_TipoUpdateArgs>(args: SelectSubset<T, Usuario_TipoUpdateArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuario_Tipos.
     * @param {Usuario_TipoDeleteManyArgs} args - Arguments to filter Usuario_Tipos to delete.
     * @example
     * // Delete a few Usuario_Tipos
     * const { count } = await prisma.usuario_Tipo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Usuario_TipoDeleteManyArgs>(args?: SelectSubset<T, Usuario_TipoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuario_Tipos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Usuario_TipoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuario_Tipos
     * const usuario_Tipo = await prisma.usuario_Tipo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Usuario_TipoUpdateManyArgs>(args: SelectSubset<T, Usuario_TipoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario_Tipo.
     * @param {Usuario_TipoUpsertArgs} args - Arguments to update or create a Usuario_Tipo.
     * @example
     * // Update or create a Usuario_Tipo
     * const usuario_Tipo = await prisma.usuario_Tipo.upsert({
     *   create: {
     *     // ... data to create a Usuario_Tipo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario_Tipo we want to update
     *   }
     * })
     */
    upsert<T extends Usuario_TipoUpsertArgs>(args: SelectSubset<T, Usuario_TipoUpsertArgs<ExtArgs>>): Prisma__Usuario_TipoClient<$Result.GetResult<Prisma.$Usuario_TipoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuario_Tipos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Usuario_TipoCountArgs} args - Arguments to filter Usuario_Tipos to count.
     * @example
     * // Count the number of Usuario_Tipos
     * const count = await prisma.usuario_Tipo.count({
     *   where: {
     *     // ... the filter for the Usuario_Tipos we want to count
     *   }
     * })
    **/
    count<T extends Usuario_TipoCountArgs>(
      args?: Subset<T, Usuario_TipoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Usuario_TipoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario_Tipo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Usuario_TipoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Usuario_TipoAggregateArgs>(args: Subset<T, Usuario_TipoAggregateArgs>): Prisma.PrismaPromise<GetUsuario_TipoAggregateType<T>>

    /**
     * Group by Usuario_Tipo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Usuario_TipoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Usuario_TipoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Usuario_TipoGroupByArgs['orderBy'] }
        : { orderBy?: Usuario_TipoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Usuario_TipoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuario_TipoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario_Tipo model
   */
  readonly fields: Usuario_TipoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario_Tipo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Usuario_TipoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends Usuario_Tipo$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, Usuario_Tipo$usuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario_Tipo model
   */ 
  interface Usuario_TipoFieldRefs {
    readonly usuario_tipo_id: FieldRef<"Usuario_Tipo", 'Int'>
    readonly usuario_tipo: FieldRef<"Usuario_Tipo", 'String'>
    readonly parametro_edit_config: FieldRef<"Usuario_Tipo", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Usuario_Tipo findUnique
   */
  export type Usuario_TipoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * Filter, which Usuario_Tipo to fetch.
     */
    where: Usuario_TipoWhereUniqueInput
  }

  /**
   * Usuario_Tipo findUniqueOrThrow
   */
  export type Usuario_TipoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * Filter, which Usuario_Tipo to fetch.
     */
    where: Usuario_TipoWhereUniqueInput
  }

  /**
   * Usuario_Tipo findFirst
   */
  export type Usuario_TipoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * Filter, which Usuario_Tipo to fetch.
     */
    where?: Usuario_TipoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuario_Tipos to fetch.
     */
    orderBy?: Usuario_TipoOrderByWithRelationInput | Usuario_TipoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuario_Tipos.
     */
    cursor?: Usuario_TipoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuario_Tipos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuario_Tipos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuario_Tipos.
     */
    distinct?: Usuario_TipoScalarFieldEnum | Usuario_TipoScalarFieldEnum[]
  }

  /**
   * Usuario_Tipo findFirstOrThrow
   */
  export type Usuario_TipoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * Filter, which Usuario_Tipo to fetch.
     */
    where?: Usuario_TipoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuario_Tipos to fetch.
     */
    orderBy?: Usuario_TipoOrderByWithRelationInput | Usuario_TipoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuario_Tipos.
     */
    cursor?: Usuario_TipoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuario_Tipos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuario_Tipos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuario_Tipos.
     */
    distinct?: Usuario_TipoScalarFieldEnum | Usuario_TipoScalarFieldEnum[]
  }

  /**
   * Usuario_Tipo findMany
   */
  export type Usuario_TipoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * Filter, which Usuario_Tipos to fetch.
     */
    where?: Usuario_TipoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuario_Tipos to fetch.
     */
    orderBy?: Usuario_TipoOrderByWithRelationInput | Usuario_TipoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuario_Tipos.
     */
    cursor?: Usuario_TipoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuario_Tipos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuario_Tipos.
     */
    skip?: number
    distinct?: Usuario_TipoScalarFieldEnum | Usuario_TipoScalarFieldEnum[]
  }

  /**
   * Usuario_Tipo create
   */
  export type Usuario_TipoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario_Tipo.
     */
    data: XOR<Usuario_TipoCreateInput, Usuario_TipoUncheckedCreateInput>
  }

  /**
   * Usuario_Tipo createMany
   */
  export type Usuario_TipoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuario_Tipos.
     */
    data: Usuario_TipoCreateManyInput | Usuario_TipoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario_Tipo update
   */
  export type Usuario_TipoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario_Tipo.
     */
    data: XOR<Usuario_TipoUpdateInput, Usuario_TipoUncheckedUpdateInput>
    /**
     * Choose, which Usuario_Tipo to update.
     */
    where: Usuario_TipoWhereUniqueInput
  }

  /**
   * Usuario_Tipo updateMany
   */
  export type Usuario_TipoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuario_Tipos.
     */
    data: XOR<Usuario_TipoUpdateManyMutationInput, Usuario_TipoUncheckedUpdateManyInput>
    /**
     * Filter which Usuario_Tipos to update
     */
    where?: Usuario_TipoWhereInput
  }

  /**
   * Usuario_Tipo upsert
   */
  export type Usuario_TipoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario_Tipo to update in case it exists.
     */
    where: Usuario_TipoWhereUniqueInput
    /**
     * In case the Usuario_Tipo found by the `where` argument doesn't exist, create a new Usuario_Tipo with this data.
     */
    create: XOR<Usuario_TipoCreateInput, Usuario_TipoUncheckedCreateInput>
    /**
     * In case the Usuario_Tipo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Usuario_TipoUpdateInput, Usuario_TipoUncheckedUpdateInput>
  }

  /**
   * Usuario_Tipo delete
   */
  export type Usuario_TipoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
    /**
     * Filter which Usuario_Tipo to delete.
     */
    where: Usuario_TipoWhereUniqueInput
  }

  /**
   * Usuario_Tipo deleteMany
   */
  export type Usuario_TipoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario_Tipos to delete
     */
    where?: Usuario_TipoWhereInput
  }

  /**
   * Usuario_Tipo.usuario
   */
  export type Usuario_Tipo$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    cursor?: UsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario_Tipo without action
   */
  export type Usuario_TipoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario_Tipo
     */
    select?: Usuario_TipoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Usuario_TipoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    usuario_id: 'usuario_id',
    usuario_nome: 'usuario_nome',
    usuario_login: 'usuario_login',
    usuario_cpf: 'usuario_cpf',
    usuario_senha: 'usuario_senha',
    usuario_tipo_id: 'usuario_tipo_id'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const Usuario_TipoScalarFieldEnum: {
    usuario_tipo_id: 'usuario_tipo_id',
    usuario_tipo: 'usuario_tipo',
    parametro_edit_config: 'parametro_edit_config'
  };

  export type Usuario_TipoScalarFieldEnum = (typeof Usuario_TipoScalarFieldEnum)[keyof typeof Usuario_TipoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    usuario_id?: IntFilter<"Usuario"> | number
    usuario_nome?: StringFilter<"Usuario"> | string
    usuario_login?: StringFilter<"Usuario"> | string
    usuario_cpf?: StringFilter<"Usuario"> | string
    usuario_senha?: StringFilter<"Usuario"> | string
    usuario_tipo_id?: IntFilter<"Usuario"> | number
    tipo_usuario?: XOR<Usuario_TipoNullableRelationFilter, Usuario_TipoWhereInput> | null
  }

  export type UsuarioOrderByWithRelationInput = {
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
    usuario_login?: SortOrder
    usuario_cpf?: SortOrder
    usuario_senha?: SortOrder
    usuario_tipo_id?: SortOrder
    tipo_usuario?: Usuario_TipoOrderByWithRelationInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    usuario_id?: number
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    usuario_nome?: StringFilter<"Usuario"> | string
    usuario_login?: StringFilter<"Usuario"> | string
    usuario_cpf?: StringFilter<"Usuario"> | string
    usuario_senha?: StringFilter<"Usuario"> | string
    usuario_tipo_id?: IntFilter<"Usuario"> | number
    tipo_usuario?: XOR<Usuario_TipoNullableRelationFilter, Usuario_TipoWhereInput> | null
  }, "usuario_id">

  export type UsuarioOrderByWithAggregationInput = {
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
    usuario_login?: SortOrder
    usuario_cpf?: SortOrder
    usuario_senha?: SortOrder
    usuario_tipo_id?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    usuario_id?: IntWithAggregatesFilter<"Usuario"> | number
    usuario_nome?: StringWithAggregatesFilter<"Usuario"> | string
    usuario_login?: StringWithAggregatesFilter<"Usuario"> | string
    usuario_cpf?: StringWithAggregatesFilter<"Usuario"> | string
    usuario_senha?: StringWithAggregatesFilter<"Usuario"> | string
    usuario_tipo_id?: IntWithAggregatesFilter<"Usuario"> | number
  }

  export type Usuario_TipoWhereInput = {
    AND?: Usuario_TipoWhereInput | Usuario_TipoWhereInput[]
    OR?: Usuario_TipoWhereInput[]
    NOT?: Usuario_TipoWhereInput | Usuario_TipoWhereInput[]
    usuario_tipo_id?: IntFilter<"Usuario_Tipo"> | number
    usuario_tipo?: StringFilter<"Usuario_Tipo"> | string
    parametro_edit_config?: BoolFilter<"Usuario_Tipo"> | boolean
    usuario?: UsuarioListRelationFilter
  }

  export type Usuario_TipoOrderByWithRelationInput = {
    usuario_tipo_id?: SortOrder
    usuario_tipo?: SortOrder
    parametro_edit_config?: SortOrder
    usuario?: UsuarioOrderByRelationAggregateInput
  }

  export type Usuario_TipoWhereUniqueInput = Prisma.AtLeast<{
    usuario_tipo_id?: number
    AND?: Usuario_TipoWhereInput | Usuario_TipoWhereInput[]
    OR?: Usuario_TipoWhereInput[]
    NOT?: Usuario_TipoWhereInput | Usuario_TipoWhereInput[]
    usuario_tipo?: StringFilter<"Usuario_Tipo"> | string
    parametro_edit_config?: BoolFilter<"Usuario_Tipo"> | boolean
    usuario?: UsuarioListRelationFilter
  }, "usuario_tipo_id">

  export type Usuario_TipoOrderByWithAggregationInput = {
    usuario_tipo_id?: SortOrder
    usuario_tipo?: SortOrder
    parametro_edit_config?: SortOrder
    _count?: Usuario_TipoCountOrderByAggregateInput
    _avg?: Usuario_TipoAvgOrderByAggregateInput
    _max?: Usuario_TipoMaxOrderByAggregateInput
    _min?: Usuario_TipoMinOrderByAggregateInput
    _sum?: Usuario_TipoSumOrderByAggregateInput
  }

  export type Usuario_TipoScalarWhereWithAggregatesInput = {
    AND?: Usuario_TipoScalarWhereWithAggregatesInput | Usuario_TipoScalarWhereWithAggregatesInput[]
    OR?: Usuario_TipoScalarWhereWithAggregatesInput[]
    NOT?: Usuario_TipoScalarWhereWithAggregatesInput | Usuario_TipoScalarWhereWithAggregatesInput[]
    usuario_tipo_id?: IntWithAggregatesFilter<"Usuario_Tipo"> | number
    usuario_tipo?: StringWithAggregatesFilter<"Usuario_Tipo"> | string
    parametro_edit_config?: BoolWithAggregatesFilter<"Usuario_Tipo"> | boolean
  }

  export type UsuarioCreateInput = {
    usuario_nome: string
    usuario_login: string
    usuario_cpf: string
    usuario_senha: string
    tipo_usuario?: Usuario_TipoCreateNestedOneWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    usuario_id?: number
    usuario_nome: string
    usuario_login: string
    usuario_cpf: string
    usuario_senha: string
    usuario_tipo_id: number
  }

  export type UsuarioUpdateInput = {
    usuario_nome?: StringFieldUpdateOperationsInput | string
    usuario_login?: StringFieldUpdateOperationsInput | string
    usuario_cpf?: StringFieldUpdateOperationsInput | string
    usuario_senha?: StringFieldUpdateOperationsInput | string
    tipo_usuario?: Usuario_TipoUpdateOneWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    usuario_id?: IntFieldUpdateOperationsInput | number
    usuario_nome?: StringFieldUpdateOperationsInput | string
    usuario_login?: StringFieldUpdateOperationsInput | string
    usuario_cpf?: StringFieldUpdateOperationsInput | string
    usuario_senha?: StringFieldUpdateOperationsInput | string
    usuario_tipo_id?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioCreateManyInput = {
    usuario_id?: number
    usuario_nome: string
    usuario_login: string
    usuario_cpf: string
    usuario_senha: string
    usuario_tipo_id: number
  }

  export type UsuarioUpdateManyMutationInput = {
    usuario_nome?: StringFieldUpdateOperationsInput | string
    usuario_login?: StringFieldUpdateOperationsInput | string
    usuario_cpf?: StringFieldUpdateOperationsInput | string
    usuario_senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    usuario_id?: IntFieldUpdateOperationsInput | number
    usuario_nome?: StringFieldUpdateOperationsInput | string
    usuario_login?: StringFieldUpdateOperationsInput | string
    usuario_cpf?: StringFieldUpdateOperationsInput | string
    usuario_senha?: StringFieldUpdateOperationsInput | string
    usuario_tipo_id?: IntFieldUpdateOperationsInput | number
  }

  export type Usuario_TipoCreateInput = {
    usuario_tipo: string
    parametro_edit_config: boolean
    usuario?: UsuarioCreateNestedManyWithoutTipo_usuarioInput
  }

  export type Usuario_TipoUncheckedCreateInput = {
    usuario_tipo_id?: number
    usuario_tipo: string
    parametro_edit_config: boolean
    usuario?: UsuarioUncheckedCreateNestedManyWithoutTipo_usuarioInput
  }

  export type Usuario_TipoUpdateInput = {
    usuario_tipo?: StringFieldUpdateOperationsInput | string
    parametro_edit_config?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateManyWithoutTipo_usuarioNestedInput
  }

  export type Usuario_TipoUncheckedUpdateInput = {
    usuario_tipo_id?: IntFieldUpdateOperationsInput | number
    usuario_tipo?: StringFieldUpdateOperationsInput | string
    parametro_edit_config?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUncheckedUpdateManyWithoutTipo_usuarioNestedInput
  }

  export type Usuario_TipoCreateManyInput = {
    usuario_tipo_id?: number
    usuario_tipo: string
    parametro_edit_config: boolean
  }

  export type Usuario_TipoUpdateManyMutationInput = {
    usuario_tipo?: StringFieldUpdateOperationsInput | string
    parametro_edit_config?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Usuario_TipoUncheckedUpdateManyInput = {
    usuario_tipo_id?: IntFieldUpdateOperationsInput | number
    usuario_tipo?: StringFieldUpdateOperationsInput | string
    parametro_edit_config?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Usuario_TipoNullableRelationFilter = {
    is?: Usuario_TipoWhereInput | null
    isNot?: Usuario_TipoWhereInput | null
  }

  export type UsuarioCountOrderByAggregateInput = {
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
    usuario_login?: SortOrder
    usuario_cpf?: SortOrder
    usuario_senha?: SortOrder
    usuario_tipo_id?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    usuario_id?: SortOrder
    usuario_tipo_id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
    usuario_login?: SortOrder
    usuario_cpf?: SortOrder
    usuario_senha?: SortOrder
    usuario_tipo_id?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
    usuario_login?: SortOrder
    usuario_cpf?: SortOrder
    usuario_senha?: SortOrder
    usuario_tipo_id?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    usuario_id?: SortOrder
    usuario_tipo_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UsuarioListRelationFilter = {
    every?: UsuarioWhereInput
    some?: UsuarioWhereInput
    none?: UsuarioWhereInput
  }

  export type UsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Usuario_TipoCountOrderByAggregateInput = {
    usuario_tipo_id?: SortOrder
    usuario_tipo?: SortOrder
    parametro_edit_config?: SortOrder
  }

  export type Usuario_TipoAvgOrderByAggregateInput = {
    usuario_tipo_id?: SortOrder
  }

  export type Usuario_TipoMaxOrderByAggregateInput = {
    usuario_tipo_id?: SortOrder
    usuario_tipo?: SortOrder
    parametro_edit_config?: SortOrder
  }

  export type Usuario_TipoMinOrderByAggregateInput = {
    usuario_tipo_id?: SortOrder
    usuario_tipo?: SortOrder
    parametro_edit_config?: SortOrder
  }

  export type Usuario_TipoSumOrderByAggregateInput = {
    usuario_tipo_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type Usuario_TipoCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<Usuario_TipoCreateWithoutUsuarioInput, Usuario_TipoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: Usuario_TipoCreateOrConnectWithoutUsuarioInput
    connect?: Usuario_TipoWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Usuario_TipoUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<Usuario_TipoCreateWithoutUsuarioInput, Usuario_TipoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: Usuario_TipoCreateOrConnectWithoutUsuarioInput
    upsert?: Usuario_TipoUpsertWithoutUsuarioInput
    disconnect?: Usuario_TipoWhereInput | boolean
    delete?: Usuario_TipoWhereInput | boolean
    connect?: Usuario_TipoWhereUniqueInput
    update?: XOR<XOR<Usuario_TipoUpdateToOneWithWhereWithoutUsuarioInput, Usuario_TipoUpdateWithoutUsuarioInput>, Usuario_TipoUncheckedUpdateWithoutUsuarioInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsuarioCreateNestedManyWithoutTipo_usuarioInput = {
    create?: XOR<UsuarioCreateWithoutTipo_usuarioInput, UsuarioUncheckedCreateWithoutTipo_usuarioInput> | UsuarioCreateWithoutTipo_usuarioInput[] | UsuarioUncheckedCreateWithoutTipo_usuarioInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutTipo_usuarioInput | UsuarioCreateOrConnectWithoutTipo_usuarioInput[]
    createMany?: UsuarioCreateManyTipo_usuarioInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type UsuarioUncheckedCreateNestedManyWithoutTipo_usuarioInput = {
    create?: XOR<UsuarioCreateWithoutTipo_usuarioInput, UsuarioUncheckedCreateWithoutTipo_usuarioInput> | UsuarioCreateWithoutTipo_usuarioInput[] | UsuarioUncheckedCreateWithoutTipo_usuarioInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutTipo_usuarioInput | UsuarioCreateOrConnectWithoutTipo_usuarioInput[]
    createMany?: UsuarioCreateManyTipo_usuarioInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsuarioUpdateManyWithoutTipo_usuarioNestedInput = {
    create?: XOR<UsuarioCreateWithoutTipo_usuarioInput, UsuarioUncheckedCreateWithoutTipo_usuarioInput> | UsuarioCreateWithoutTipo_usuarioInput[] | UsuarioUncheckedCreateWithoutTipo_usuarioInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutTipo_usuarioInput | UsuarioCreateOrConnectWithoutTipo_usuarioInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutTipo_usuarioInput | UsuarioUpsertWithWhereUniqueWithoutTipo_usuarioInput[]
    createMany?: UsuarioCreateManyTipo_usuarioInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutTipo_usuarioInput | UsuarioUpdateWithWhereUniqueWithoutTipo_usuarioInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutTipo_usuarioInput | UsuarioUpdateManyWithWhereWithoutTipo_usuarioInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type UsuarioUncheckedUpdateManyWithoutTipo_usuarioNestedInput = {
    create?: XOR<UsuarioCreateWithoutTipo_usuarioInput, UsuarioUncheckedCreateWithoutTipo_usuarioInput> | UsuarioCreateWithoutTipo_usuarioInput[] | UsuarioUncheckedCreateWithoutTipo_usuarioInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutTipo_usuarioInput | UsuarioCreateOrConnectWithoutTipo_usuarioInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutTipo_usuarioInput | UsuarioUpsertWithWhereUniqueWithoutTipo_usuarioInput[]
    createMany?: UsuarioCreateManyTipo_usuarioInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutTipo_usuarioInput | UsuarioUpdateWithWhereUniqueWithoutTipo_usuarioInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutTipo_usuarioInput | UsuarioUpdateManyWithWhereWithoutTipo_usuarioInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type Usuario_TipoCreateWithoutUsuarioInput = {
    usuario_tipo: string
    parametro_edit_config: boolean
  }

  export type Usuario_TipoUncheckedCreateWithoutUsuarioInput = {
    usuario_tipo_id?: number
    usuario_tipo: string
    parametro_edit_config: boolean
  }

  export type Usuario_TipoCreateOrConnectWithoutUsuarioInput = {
    where: Usuario_TipoWhereUniqueInput
    create: XOR<Usuario_TipoCreateWithoutUsuarioInput, Usuario_TipoUncheckedCreateWithoutUsuarioInput>
  }

  export type Usuario_TipoUpsertWithoutUsuarioInput = {
    update: XOR<Usuario_TipoUpdateWithoutUsuarioInput, Usuario_TipoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<Usuario_TipoCreateWithoutUsuarioInput, Usuario_TipoUncheckedCreateWithoutUsuarioInput>
    where?: Usuario_TipoWhereInput
  }

  export type Usuario_TipoUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: Usuario_TipoWhereInput
    data: XOR<Usuario_TipoUpdateWithoutUsuarioInput, Usuario_TipoUncheckedUpdateWithoutUsuarioInput>
  }

  export type Usuario_TipoUpdateWithoutUsuarioInput = {
    usuario_tipo?: StringFieldUpdateOperationsInput | string
    parametro_edit_config?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Usuario_TipoUncheckedUpdateWithoutUsuarioInput = {
    usuario_tipo_id?: IntFieldUpdateOperationsInput | number
    usuario_tipo?: StringFieldUpdateOperationsInput | string
    parametro_edit_config?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioCreateWithoutTipo_usuarioInput = {
    usuario_nome: string
    usuario_login: string
    usuario_cpf: string
    usuario_senha: string
  }

  export type UsuarioUncheckedCreateWithoutTipo_usuarioInput = {
    usuario_id?: number
    usuario_nome: string
    usuario_login: string
    usuario_cpf: string
    usuario_senha: string
  }

  export type UsuarioCreateOrConnectWithoutTipo_usuarioInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTipo_usuarioInput, UsuarioUncheckedCreateWithoutTipo_usuarioInput>
  }

  export type UsuarioCreateManyTipo_usuarioInputEnvelope = {
    data: UsuarioCreateManyTipo_usuarioInput | UsuarioCreateManyTipo_usuarioInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithWhereUniqueWithoutTipo_usuarioInput = {
    where: UsuarioWhereUniqueInput
    update: XOR<UsuarioUpdateWithoutTipo_usuarioInput, UsuarioUncheckedUpdateWithoutTipo_usuarioInput>
    create: XOR<UsuarioCreateWithoutTipo_usuarioInput, UsuarioUncheckedCreateWithoutTipo_usuarioInput>
  }

  export type UsuarioUpdateWithWhereUniqueWithoutTipo_usuarioInput = {
    where: UsuarioWhereUniqueInput
    data: XOR<UsuarioUpdateWithoutTipo_usuarioInput, UsuarioUncheckedUpdateWithoutTipo_usuarioInput>
  }

  export type UsuarioUpdateManyWithWhereWithoutTipo_usuarioInput = {
    where: UsuarioScalarWhereInput
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyWithoutTipo_usuarioInput>
  }

  export type UsuarioScalarWhereInput = {
    AND?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    OR?: UsuarioScalarWhereInput[]
    NOT?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    usuario_id?: IntFilter<"Usuario"> | number
    usuario_nome?: StringFilter<"Usuario"> | string
    usuario_login?: StringFilter<"Usuario"> | string
    usuario_cpf?: StringFilter<"Usuario"> | string
    usuario_senha?: StringFilter<"Usuario"> | string
    usuario_tipo_id?: IntFilter<"Usuario"> | number
  }

  export type UsuarioCreateManyTipo_usuarioInput = {
    usuario_id?: number
    usuario_nome: string
    usuario_login: string
    usuario_cpf: string
    usuario_senha: string
  }

  export type UsuarioUpdateWithoutTipo_usuarioInput = {
    usuario_nome?: StringFieldUpdateOperationsInput | string
    usuario_login?: StringFieldUpdateOperationsInput | string
    usuario_cpf?: StringFieldUpdateOperationsInput | string
    usuario_senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateWithoutTipo_usuarioInput = {
    usuario_id?: IntFieldUpdateOperationsInput | number
    usuario_nome?: StringFieldUpdateOperationsInput | string
    usuario_login?: StringFieldUpdateOperationsInput | string
    usuario_cpf?: StringFieldUpdateOperationsInput | string
    usuario_senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyWithoutTipo_usuarioInput = {
    usuario_id?: IntFieldUpdateOperationsInput | number
    usuario_nome?: StringFieldUpdateOperationsInput | string
    usuario_login?: StringFieldUpdateOperationsInput | string
    usuario_cpf?: StringFieldUpdateOperationsInput | string
    usuario_senha?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Usuario_TipoCountOutputTypeDefaultArgs instead
     */
    export type Usuario_TipoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Usuario_TipoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Usuario_TipoDefaultArgs instead
     */
    export type Usuario_TipoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Usuario_TipoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}